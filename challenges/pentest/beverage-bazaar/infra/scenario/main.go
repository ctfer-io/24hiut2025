package main

import (
	"fmt"
	"net/url"
	"strings"

	"github.com/ctfer-io/chall-manager/sdk"
	"github.com/go-playground/form/v4"
	appsv1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/apps/v1"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	netwv1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/networking/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

const (
	baseFlag = "Anonymous_FTP_Connection"
	ftpPort  = 2100
	sshPort  = 22
)

type Config struct {
	Hostname string `form:"hostname"`
	Registry string `form:"registry"`
	Image    string `form:"image"`

	ConnectionInfo string `form:"connectionInfo"`
}

func main() {
	sdk.Run(func(req *sdk.Request, resp *sdk.Response, opts ...pulumi.ResourceOption) error {
		conf, err := loadConfig(req.Config.Additional)
		if err != nil {
			return err
		}

		flag := pulumi.Sprintf("24HIUT{%s}", sdk.Variate(req.Config.Identity, baseFlag))

		labels := pulumi.StringMap{
			"chall-manager.ctfer.io/kind":      pulumi.String("custom"),
			"chall-manager.ctfer.io/identity":  pulumi.String(req.Config.Identity),
			"chall-manager.ctfer.io/category":  pulumi.String("pentest"),
			"chall-manager.ctfer.io/challenge": pulumi.String("beverage-bazaar"),
		}

		svc, err := corev1.NewService(req.Ctx, "beverage-bazaar-svc", &corev1.ServiceArgs{
			Metadata: metav1.ObjectMetaArgs{
				Labels: labels,
			},
			Spec: corev1.ServiceSpecArgs{
				Selector: labels,
				Type:     pulumi.String("NodePort"),
				Ports: corev1.ServicePortArray{
					corev1.ServicePortArgs{
						Name:       pulumi.String("ssh"),
						Port:       pulumi.Int(sshPort),
						TargetPort: pulumi.Int(sshPort),
					},
					corev1.ServicePortArgs{
						Name:       pulumi.String("ftp"),
						Port:       pulumi.Int(ftpPort),
						TargetPort: pulumi.Int(ftpPort),
					},
					corev1.ServicePortArgs{
						Name:       pulumi.String("ftpdata"),
						Port:       pulumi.Int(30000),
						TargetPort: pulumi.String("ftpdata"), // use the name because the containerPort must be the generated nodePort
					},
				},
			},
		}, opts...)
		if err != nil {
			return err
		}

		cm, err := corev1.NewConfigMap(req.Ctx, "beverage-bazaar-cm", &corev1.ConfigMapArgs{
			Metadata: metav1.ObjectMetaArgs{
				Labels: labels,
			},
			Data: pulumi.StringMap{
				"vsftpd.conf": svc.Spec.ApplyT(func(spec *corev1.ServiceSpec) string {
					var pftpNPort int
					if spec.Ports[2].NodePort != nil {
						pftpNPort = *spec.Ports[2].NodePort
					}

					out := fmt.Sprintf(`listen=YES
listen_ipv6=NO
anonymous_enable=YES
local_enable=YES
write_enable=NO
dirmessage_enable=YES
use_localtime=YES
xferlog_enable=YES
connect_from_port_20=YES
ftpd_banner=Welcome to PopaCola fileserver.
secure_chroot_dir=/var/run/vsftpd/empty
pam_service_name=vsftpd
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=NO
listen_port=%[1]d
pasv_enable=YES
pasv_min_port=%[2]d
pasv_max_port=%[2]d
anon_root=/ftp`, ftpPort, pftpNPort)
					return out
				}).(pulumi.StringOutput),
				"flag.txt": flag,
			},
		}, opts...)
		if err != nil {
			return err
		}

		if _, err := appsv1.NewDeployment(req.Ctx, "beverage-bazaar-deploy", &appsv1.DeploymentArgs{
			Metadata: metav1.ObjectMetaArgs{
				Labels: labels,
			},
			Spec: appsv1.DeploymentSpecArgs{
				Selector: metav1.LabelSelectorArgs{
					MatchLabels: labels,
				},
				Template: corev1.PodTemplateSpecArgs{
					Metadata: metav1.ObjectMetaArgs{
						Labels: labels,
					},
					Spec: corev1.PodSpecArgs{
						Containers: corev1.ContainerArray{
							corev1.ContainerArgs{
								Name: pulumi.String("challenge"),
								Image: pulumi.String(func() string {
									if conf.Registry != "" && !strings.HasSuffix(conf.Registry, "/") {
										conf.Registry += "/"
									}
									return conf.Registry + conf.Image
								}()),
								Ports: corev1.ContainerPortArray{
									corev1.ContainerPortArgs{
										Name: pulumi.String("ftpdata"),
										ContainerPort: svc.Spec.ApplyT(func(spec *corev1.ServiceSpec) int {
											if spec.Ports[2].NodePort == nil {
												return 0
											}
											return *spec.Ports[2].NodePort
										}).(pulumi.IntOutput),
									},
									corev1.ContainerPortArgs{
										ContainerPort: pulumi.Int(ftpPort),
									},
									corev1.ContainerPortArgs{
										ContainerPort: pulumi.Int(sshPort),
									},
								},
								VolumeMounts: corev1.VolumeMountArray{
									corev1.VolumeMountArgs{
										MountPath: pulumi.String("/etc/vsftpd.conf"),
										Name:      pulumi.String("config"),
										SubPath:   pulumi.String("vsftpd.conf"),
									},
									corev1.VolumeMountArgs{
										MountPath: pulumi.String("/home/mdupuis/flag.txt"),
										Name:      pulumi.String("config"),
										SubPath:   pulumi.String("flag.txt"),
									},
								},
							},
						},
						Volumes: corev1.VolumeArray{
							corev1.VolumeArgs{
								Name: pulumi.String("config"),
								ConfigMap: corev1.ConfigMapVolumeSourceArgs{
									Name: cm.Metadata.Name(),
								},
							},
						},
					},
				},
			},
		}, opts...); err != nil {
			return err
		}

		if _, err := netwv1.NewNetworkPolicy(req.Ctx, "ntp-nodeports", &netwv1.NetworkPolicyArgs{
			Metadata: metav1.ObjectMetaArgs{
				Labels: labels,
			},
			Spec: netwv1.NetworkPolicySpecArgs{
				PodSelector: metav1.LabelSelectorArgs{
					MatchLabels: labels,
				},
				PolicyTypes: pulumi.ToStringArray([]string{
					"Ingress",
					"Egress",
				}),
				Ingress: netwv1.NetworkPolicyIngressRuleArray{
					netwv1.NetworkPolicyIngressRuleArgs{
						From: netwv1.NetworkPolicyPeerArray{
							netwv1.NetworkPolicyPeerArgs{
								IpBlock: netwv1.IPBlockArgs{
									Cidr: pulumi.String("0.0.0.0/0"),
								},
							},
						},
						Ports: svc.Spec.ApplyT(func(spec *corev1.ServiceSpec) []netwv1.NetworkPolicyPort {
							// Pick only active ports
							actives := spec.Ports[:2]

							out := make([]netwv1.NetworkPolicyPort, 0, len(actives))
							for _, p := range actives {
								out = append(out, netwv1.NetworkPolicyPort{
									Port: p.Port,
								})
							}
							return out
						}).(netwv1.NetworkPolicyPortArrayOutput),
					},
				},
				Egress: netwv1.NetworkPolicyEgressRuleArray{
					netwv1.NetworkPolicyEgressRuleArgs{
						To: netwv1.NetworkPolicyPeerArray{
							netwv1.NetworkPolicyPeerArgs{
								IpBlock: netwv1.IPBlockArgs{
									Cidr: pulumi.String("0.0.0.0/0"),
								},
							},
						},
						Ports: netwv1.NetworkPolicyPortArray{
							netwv1.NetworkPolicyPortArgs{
								Port: svc.Spec.ApplyT(func(spec *corev1.ServiceSpec) int {
									if spec.Ports[2].NodePort == nil {
										return 0
									}
									return *spec.Ports[2].NodePort
								}).(pulumi.IntOutput),
							},
						},
					},
				},
			},
		}, opts...); err != nil {
			return err
		}

		resp.ConnectionInfo = svc.Spec.ApplyT(func(spec *corev1.ServiceSpec) string {
			var ftpNPort int
			if spec.Ports[1].NodePort != nil {
				ftpNPort = *spec.Ports[1].NodePort
			}
			var sshNPort int
			if spec.Ports[0].NodePort != nil {
				sshNPort = *spec.Ports[0].NodePort
			}
			return fmt.Sprintf("FTP: %[1]s %[2]d \n SSH: %[1]s %[3]d", conf.ConnectionInfo, ftpNPort, sshNPort)
		}).(pulumi.StringOutput)
		resp.Flag = flag
		return nil
	})
}

func loadConfig(additionals map[string]string) (*Config, error) {
	// Default conf
	conf := &Config{
		Hostname:       "24hiut2025.ctfer.io",
		Image:          "pentest/beverage-bazaar:v0.1.0",
		ConnectionInfo: "challenges.24hiut2025.ctfer.io",
	}

	// Override with additionals
	dec := form.NewDecoder()
	if err := dec.Decode(conf, toValues(additionals)); err != nil {
		return nil, err
	}
	return conf, nil
}

func toValues(additionals map[string]string) url.Values {
	vals := make(url.Values, len(additionals))
	for k, v := range additionals {
		vals[k] = []string{v}
	}
	return vals
}
